import styles from "./style.css?inline";

import type { NetlessApp } from "@netless/window-manager";

export interface <%- camelName %>Attributes {
  count: number;
}

export interface MagixEventPayloads {
  ping: number; // ping as message event key, `number` is the payload format.
  pong: {
    c: number;
  };
}

const <%- camelName %>: NetlessApp<<%- camelName %>Attributes, MagixEventPayloads> = {
  kind: "<%- camelName %>",
  setup(context) {
    /* ------------------------------------------------- *\
     * Mount App Styles
    \* ------------------------------------------------- */
    const box = context.box;
    box.mountStyles(styles);

    /* ------------------------------------------------- *\
     * Mount App DOM
    \* ------------------------------------------------- */
    const $content = document.createElement("div");
    $content.className = "<%- fullName %>-container";
    $content.textContent = "Hello World";
    box.mountContent($content);

    /* ------------------------------------------------- *\
     * Replayable Synced Storage
    \* ------------------------------------------------- */
    // Create a storage under "counter" namespace with default value.
    // You can create multiple storages under the same namespace.
    // They will share the same synced storage.
    const storage1 = context.createStorage("counter", { count: 1 });

    // Access states
    log("Storage 'counter' state", storage1.state.count); // 1

    // Listen to state changes
    const storage1StateListenerDisposer = storage1.on("stateChanged", diff => {
      if (diff.count) {
        log(diff.count.newValue, diff.count.oldValue);
      }
    });

    const sea = {
      a: 1,
      b: false
    };

    // Only writable user can setState
    if (context.isWritable) {
      // Similar to React setState, unchanged values will be filtered by a root-level shallow-compare.
      storage1.setState({
        count: 2,
        disabled: true,
        // Note that `setState` only performs root-level shallow-compare.
        // Object `sea` will be compared with `===`.
        // Keys of `sea` will not be compared!
        sea
      });
    }

    /* ------------------------------------------------- *\
     * Replayable Messaging between client (and self).
    \* ------------------------------------------------- */
    const magixListenerDisposer = context.addMagixEventListener("ping", message => {
      log("Received Message", message);
    });

    if (context.isWritable) {
      context.dispatchMagixEvent("ping", 22);
    }

    // Remember to remove unused listener
    context.emitter.on("destroy", () => {
      storage1StateListenerDisposer();
      stateListenerDisposer();
      magixListenerDisposer();
    });

    // little log helper for visual appealing
    function log(...args: unknown[]) {
      return console.log("%c [<%- camelName %>] ", "background:#FF8C00;color:#fff;", ...args);
    }
  },
};

export default <%- camelName %>;
